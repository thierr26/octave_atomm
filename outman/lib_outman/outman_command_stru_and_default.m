## Copyright (C) 2016 Thierry Rascle <thierr26@free.fr>
## MIT license. Please refer to the LICENSE file.

## -*- texinfo -*-
## @deftypefn {Function File} {[@var{s}, @var{@
## default}] =} outman_command_stru_and_default ()
##
## Outman's command structure and default command name.
##
## @code{[@var{s}, @var{default}] = outman_command_stru_and_default ()} returns
## the command structure of Outman in @var{s} and the name of Outman's default
## command in @var{default}.
##
## Please issue a @code{help mentalsum} statement for details about the command
## structure of applications like Outman.
##
## @seealso{mentalsum, outman}
## @end deftypefn

## Author: Thierry Rascle <thierr26@free.fr>

function [s, default] = outman_command_stru_and_default

    default = 'configure';
    s = struct(...
        default, struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', false), ...
        'quit', struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', true), ...
        'connect', struct(...
            'valid', @() true, ...
            'no_return_value', false), ...
        'disp', struct(...
            'valid', ...
                @(varargin) scalar_num_arg_or_none(varargin{1 : end - 1}), ...
            'no_return_value', true), ...
        'dispf', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'printf', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'errorf', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'warningf', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'infof', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'logf', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'logtimef', struct(...
            'valid', @outman_printf_args, ...
            'no_return_value', true), ...
        'init_progress', struct(...
            'valid', @outman_init_prog_args, ...
            'no_return_value', false), ...
        'update_progress', struct(...
            'valid', @outman_update_prog_args, ...
            'no_return_value', true), ...
        'shift_progress', struct(...
            'valid', ...
                @(varargin) nargin == 3 && scalar_num_args(varargin{:}), ...
            'no_return_value', true), ...
        'terminate_progress', struct(...
            'valid', ...
                @(varargin) nargin == 2 && scalar_num_args(varargin{:}), ...
            'no_return_value', false), ...
        'cancel_progress', struct(...
            'valid', ...
                @(varargin) nargin == 2 && scalar_num_args(varargin{:}), ...
            'no_return_value', true), ...
        'get_config', struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', false), ...
        'get_config_origin', struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', false), ...
        'get_hmi_variant', struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', false), ...
        'get_log_file_name', struct(...
            'valid', @scalar_num_arg_or_none, ...
            'no_return_value', false));

endfunction
